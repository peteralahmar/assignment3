%Peter Al-Ahmar, 100961570
%Assignment 3- Continued
clearvars
close all

q = 1.60217653e-19;             % electron charge
hb = 1.054571596e-34;           % Dirac constant
h = hb * 2 * pi;                % Planck constant
m = 9.10938215e-31;             % electron mass
kb = 1.3806504e-23;             % Boltzmann constant
eps = 8.854187817e-12;          % vacuum permittivity
mu = 1.2566370614e-6;           % vacuum permeability
c = 299792458;                  % speed of light
g = 9.80665;                    %metres (32.1740 ft) per s²
am = 1.66053892e-27;
%Question 2

x = 80;
y = 80;

T = 300;
G = sparse((x *y), (x*y));
V = zeros(1,(x *y));
Vo = 1;

conductivity1 = 1; %outside
conductivity2 = 1e-2; %inside

box1 = [(x* 2/5), (x* 3/5), y , (y *4/5)]; %lower box
box2 = [(x* 2/5), (x* 3/5),0, (y *1/5)]; %top box

map = ones(x,y);

for i = 1:x
    for j = 1:y
        if (i < box1(2) && i >box1(1) && ((j < box2(4)) || (j > box1(4))))
            map(i,j) = conductivity2;
        end
    end
end
%Matrix G

for i = 1:x
    
    for j = 1: y
        n = j+ (i-1) *y;
        
        if (i == 1)
            G(n,:) = 0;
            
            G(n,n) = 1;
            
            V(1,n) = 1;
            
        elseif (i == x)
            G(n,:) = 0;
            
            G(n,n) = 1;

            
        elseif ((i > 1) && (i < x) && (j==1))
            
            G(n, n+y) = map(i+1,j);
            
            G(n,n) = -(map(i,j+1)+map(i-1,j)+map(i+1,j));
            
            G(n,n-y) = map(i-1,j);
            
            G(n,n-1) = map(i,j+1);
            
        elseif ((j == y) && (i < x) && (i >1))
            G(n, n+y) = map(i+1,j);
            
            G(n,n) = -(map(i-1,j)+map(i+1,j)+map(i,j-1));
            
            G(n,n-y) = map(i-1,j);
            
            G(n,n+1) = map(i,j-1);
        else
            G(n, n+y) = map(i+1,j);
            
            G(n,n) = -(map(i-1,j)+map(i+1,j)+map(i,j+1)+map(i,j-1));
            
            G(n,n-y) = map(i-1,j);
            
            G(n,n-1) = map(i,j+1);
            
            G(n,n+1) = map(i,j-1);
        end
    end
end
figure(1);
spy(G);
title('G-Matrix');
solution1 = G\V';

act = zeros(x,y);

for i =1:x
    for j = 1:y
        n = j+(i-1) * y;
        act(i,j) = solution1(n);
    end
end

figure(2);
surf(act);
title('Voltage Map with Bottleneck');

[Efx,Efy] = gradient(act);
Efx = -Efx';
Efy = -Efy';

figure(3)
quiver(Efx',Efy');
axis tight
title('Quiver Plot of Electric Field')

%Question 3

nParticles = 5000;

em= 0.26*m; %effective mass

vth = sqrt(kb*T/em);

strdDev = vth/sqrt(2);

xboundary = 200e-9;
yboundary = 200e-9;
area = xboundary * yboundary;
concentration = 10e-15;

volts = 0.1;
ex = volts/xboundary;
ey = 0;

initialx = rand(1,nParticles) .*xboundary;
initialy = rand(1,nParticles) .*yboundary;

dt = 2* 10e-15;

temparray = zeros(1,1000); % temp array
temp = (1:1:1000);
iter = 1000;
T=300;
%7 random electrons to be chosen
chosen = randi([1, nParticles], 1, 7);

inside_box = true;
while inside_box == true
    inside = ((initialx <= (1.15 * xboundary/2) & (initialx >= (0.85 * xboundary/2))) & ((initialy < (yboundary/3) | initialy >= (2*yboundary/3))));
    
    if (sum(inside) >0)
        initialx(inside) = rand(1,sum(inside)).* xboundary;
        initialy(inside) = rand(1,sum(inside)) .* yboundary;
    else
        inside_box = false;
    end
end

velocityx = rand(1,nParticles) .*strdDev;
velocityy = rand(1,nParticles) .*strdDev;


vrms = sqrt((velocityx .^ 2) + (velocityy .^ 2));
vrms_array =zeros(1,1000);

pScatter = 1- (exp((-1*dt) / (0.2e-12))); %probability of scatter 


current_Vector = zeros(1,iter);
time_Vector = 1:1:iter;

%Accelerations
accelerationx = zeros(1,nParticles);
accelerationy = zeros(1,nParticles);

accelerationx(1,:) = ex * (q/em);

D_Velocity = zeros(1,nParticles); % Drift Velocity
E_mobility = zeros(1,nParticles); % Electron Mobility


rnxPos = (floor(initialx .* 10^8)) +1;
rnyPos = (floor(initialy.* 10^8)) +1;

%indexing

ind = sub2ind([80,80], rnxPos, rnyPos);

for i=1: iter
    
    %x-boundary using periodic boundary condition
    xbn = initialx > 200e-9;
    xbn2 = initialx < 0;
    
    initialx(xbn) = initialx(xbn) - 200e-9;
    initialx(xbn2) = initialx(xbn2) + 200e-9;
    
    
    %y-boundary reflection
    
    ybn = initialy >= 200e-9;
    ybn2 = initialy <= 0;
    
    velocityy(ybn) = - velocityy(ybn);
    velocityy(ybn2) = - velocityy(ybn2);
    
    
    inside = (((initialx <(3/5 * xboundary))&(initialx > (2/5* xboundary))) & (( initialy< (yboundary/5)) | (initialy > (4*yboundary/5))));
    inside2= (oldx< (xboundary *3/5) &  (oldx > (xboundary * 2/5)) & inside;
    
    velocityy(inside2) = - velocityy(inside2);
    initialx(inside2) = oldx(inside2);
    initialy(inside2) = oldy(inside2);

    
    oldx = initialx;
    oldy = initialy;
    
    inside3= ((oldx> xboundary *3/5) &  (oldx > (xboundary * 2/5)) & inside);
    
    velocityx = velocityx + (accelerationx .* dt);
    velocityy = velocityy + (accelerationy .* dt);
    %update position 
    
    initialx= oldx + (velocityx .* dt);
    initialy= oldy + (velocityy .* dt);

    vrms = sqrt((velocityx .^ 2) + (velocityy .^ 2));
    
    temperature = (sqrt(2) * (mean(vrms)) ^2 *em) / kb; 
    temparray(1,i) = temperature;
    
    %electron mobility
    E_mobility = mean(vrms);
    
    %Drift Velocity
    D_Velocity = E_mobility * ex;
    
    %current calculation: charge * area * concentration * average drift velocity 
    current = concentration * area * (sum(D_Velocity)/nParticles) * q; 
    
    current_Vector(i) = current;
%     time_vector(i) = i;
    
    %scatteting with velocities
    Scattering = pScatter > rand(1,nParticles);
    
    velocityx(Scattering) = randn .* strdDev;
    velocityy(Scattering) = randn .* strdDev;
    
    figure(4);
    plot(initialx(chosen),initialy(chosen),'.');
    xlabel("x-Position");
    ylabel("y-Position");

    title(['Average Temperature: ', num2str(temperature)]);

    line([0.85*xboundary/2 0.85*xboundary/2], [yboundary 2*yboundary/3]);
    line([1.15*xboundary/2 1.15*xboundary/2], [yboundary 2*yboundary/3]);
    line([0.85*xboundary/2 1.15*xboundary/2], [yboundary yboundary]);
    line([0.85*xboundary/2 1.15*xboundary/2], [2*yboundary/3 2*yboundary/3]);

    line([0.85*xboundary/2 0.85*xboundary/2], [0 yboundary/3]);
    line([1.15*xboundary/2 1.15*xboundary/2], [0 yboundary/3]);
    line([0.85*xboundary/2 1.15*xboundary/2], [0 0]);
    line([0.85*xboundary/2 1.15*xboundary/2], [yboundary/3 yboundary/3]);
    
    xlim([0,xboundary]);
    ylim([0,yboundary]);
    hold on;   
end
























